# Fill with minuses
# (this is recalculated every time the prompt is shown in function prompt_command):
fill="--- "

BLACK='\033[0;30m'
D_GRAY='\033[1;30m'
RED='\033[0;31m'
L_RED='\033[1;31m'
GREEN='\033[0;32m'
L_GREEN='\033[1;32m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
L_BLUE='\033[1;34m'
PURPLE='\033[0;35m'
L_PURPLE='\033[1;35m'
CYAN='\033[0;36m'
L_CYAN='\033[1;36m'
L_GRAY='\033[0;37m'
WHITE='\033[1;37m'


reset_style='\[\033[00m\]'
if [ -z "$VIM" ];
	then status_style=$reset_style'\[\033[0;90m\]' # gray color; use 0;37m for lighter color
	else status_style=$reset_style'\[\033[0;90;107m\]'
fi
prompt_style=$reset_style
command_style=$reset_style'\[\033[1;29m\]' # bold black
NC='\033[00m'

# Prompt variable:

OLD_PS1="$PS1"
PS1="$status_style"'$fill \t\n'"$prompt_style\`parse_git_branch\`$OLD_PS1$command_style"

# Reset color for command output
# (this one is invoked every time before a command is executed):
trap 'echo -ne "\e[0m"' DEBUG


function prompt_command {

	# create a $fill of all screen width minus the time string and a space:
	let fillsize=${COLUMNS}-9
	fill=""
	while [ "$fillsize" -gt "0" ]
	do
		fill="-${fill}" # fill with underscores to work on 
		let fillsize=${fillsize}-1
	done

	# If this is an xterm set the title to user@host:dir
	case "$TERM" in
	xterm*|rxvt*)
		bname=`basename "${PWD/$HOME/~}"`
		echo -ne "\033]0;${bname}: ${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"
		;;
	*)
		;;
	esac
}
PROMPT_COMMAND=prompt_command

# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo -e "  ${L_GRAY}[${NC} ${GREEN}${BRANCH}${NC}${STAT} ${L_GRAY}]${NC}\n \b"
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	bits=''

	if commits=$(git rev-list --left-right origin/${BRANCH}..HEAD 2>/dev/null)
	then
		local commit behind=0 ahead=0
		for commit in $commits
		do
			case "$commit" in
				"<"*) ((behind++)) ;;
				*)    ((ahead++))  ;;
			esac
		done
		if [ $behind -eq 0 -a $ahead -eq 0 ]; then
			lr="${L_CYAN}=${NC}"
		elif [ $behind -gt 0 -a $ahead -gt 0 ]; then
			lr="${L_RED}<${behind} >${ahead}${NC}"
		elif [ $behind -gt 0 -a $ahead -eq 0 ]; then
			lr="${YELLOW}<${behind}${NC}"
		elif [ $behind -eq 0 -a $ahead -gt 0 ]; then
			lr="${L_GREEN}>${ahead}${NC}"
		else
			lr="${RED}**${NC}"
		fi
		bits="${bits} ${lr}"
	fi

	status=`git status 2>&1 | tee`
	added=`git status --porcelain 2>/dev/null| grep -E "^M|^A" | wc -l`
	staged=`git status --porcelain 2>/dev/null| grep "^ M" | wc -l`
	untracked=`git ls-files --others --exclude-standard | wc -l`

	modified=`echo -n "${status}" 2> /dev/null | grep "modified:" | wc -l`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" | wc -l`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" | wc -l`
	bothadded=`echo -n "${status}" 2> /dev/null | grep "both added:" | wc -l`
	newfile=$(($newfile+$untracked+$bothadded))
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" | wc -l`

	if [ "${added}" != "0" ]; then
		bits="${bits} ${L_GREEN}+${added}${NC}"
	else
		bits="${bits} +${added}"
	fi
	if [ "${staged}" != "0" ]; then
		bits="${bits} ${YELLOW}#${staged}${NC}"
	else
		bits="${bits} #${staged}"
	fi
	if [ "${untracked}" != "0" ]; then
		bits="${bits} ${L_RED}?${untracked}${NC}"
	fi

	if [ "${modified}" != "0" ]; then
		bits="${bits} ${L_CYAN}${modified}M${NC}"
	fi
	if [ "${renamed}" != "0" ]; then
		bits="${bits} ${L_PURPLE}${renamed}R${NC}"
	fi
	if [ "${newfile}" != "0" ]; then
		bits="${bits} ${YELLOW}${newfile}N${NC}"
	fi
	if [ "${deleted}" != "0" ]; then
		bits="${bits} ${RED}${deleted}D${NC}"
	fi

	if [ ! "${bits}" == "" ]; then
		echo "${bits}"
	else
		echo ""
	fi
}
